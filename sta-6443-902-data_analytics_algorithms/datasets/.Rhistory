glmrefitliver2 =  glm(LiverPatient ~ DB + Alamine + Age + Alkphos, data = liverMale[-influenceddiagnostics2, ], family = "binomial")
# 2c)
summary(glmrefitliver2)
round(exp(glmrefitliver2$coefficients),3)
# Exercise 3
# 3a)
sleepdata = read.csv("sleep-1.csv", header = TRUE)
str(sleepdata)
glmnullsleep = glm(maxlife10 ~ 1, data = sleepdata, family = "binomial")
glmfullsleep = glm(maxlife10 ~ bodyweight + brainweight + totalsleep + gestationtime + as.factor(predationindex) + as.factor(sleepexposureindex),
data = sleepdata, family = "binomial")
stepwiseselectionsleep = step(glmnullsleep, scope = list(upper=glmfullsleep),
direction ="both",test ="Chisq", trace = F)
summary(stepwiseselectionsleep)
# 3b)
hoslem.test(stepwiseselectionsleep$y, fitted(stepwiseselectionsleep), g=10)
residudaldeviance2<-residuals(stepwiseselectionsleep, type = "deviance")
residualpearson2<-residuals(stepwiseselectionsleep, type = "pearson")
standardresidualdeviance2<-residuals(stepwiseselectionsleep, type = "deviance")/sqrt(1 - hatvalues(stepwiseselectionsleep))
standardresidualpearson2 <-residuals(stepwiseselectionsleep, type = "pearson")/sqrt(1 - hatvalues(stepwiseselectionsleep))
par(mfrow=c(1,2))
plot(standardresidualdeviance2[stepwiseselectionsleep$model$maxlife10==0], col = "red", ylim = c(-3.5,3.5), ylab = "Standard Deviance Residuals", xlab = "ID")
points(standardresidualdeviance2[stepwiseselectionsleep$model$maxlife10==1], col = "blue")
plot(standardresidualpearson2[stepwiseselectionsleep$model$maxlife10==0], col = "red", ylim = c(-3.5,3.5), ylab = "Standard Pearson Residuals", xlab = "ID")
points(standardresidualpearson2[stepwiseselectionsleep$model$maxlife10==1], col = "blue")
plot(stepwiseselectionsleep, which = 4, id.n = 5)
influenceddiagnostics3 = which(cooks.distance(stepwiseselectionsleep)>0.25)
influenceddiagnostics3
glmrefitsleep = glm(maxlife10 ~ brainweight + totalsleep + as.factor(predationindex) + as.factor(sleepexposureindex),
data = sleepdata[-influenceddiagnostics3], family = "binomial")
# 3c)
summary(glmrefitsleep)
round(exp(glmrefitsleep$coefficients),3)
# Exercice 4
# 4a)
glmnullsleep2 = glm(maxlife10 ~ 1, data = sleepdata, family = "binomial")
glmfullsleep2 = glm(maxlife10 ~ bodyweight + brainweight + totalsleep + gestationtime + predationindex + sleepexposureindex, data = sleepdata, family = "binomial")
stepwiseselectionsleep2 = step(glmnullsleep2, scope = list(upper=glmfullsleep2),
direction ="both",test ="Chisq", trace = F)
summary(stepwiseselectionsleep2)
# 4b)
hoslem.test(stepwiseselectionsleep2$y, fitted(stepwiseselectionsleep2), g=10)
residudaldeviance3<-residuals(stepwiseselectionsleep2, type = "deviance")
residualpearson3<-residuals(stepwiseselectionsleep2, type = "pearson")
standardresidualdeviance3<-residuals(stepwiseselectionsleep2, type = "deviance")/sqrt(1 - hatvalues(stepwiseselectionsleep2))
standardresidualpearson3 <-residuals(stepwiseselectionsleep2, type = "pearson")/sqrt(1 - hatvalues(stepwiseselectionsleep2))
par(mfrow=c(1,2))
plot(standardresidualdeviance3[stepwiseselectionsleep2$model$maxlife10==0], col = "red", ylim = c(-3.5,3.5), ylab = "Standard Deviance Residuals", xlab = "ID")
points(standardresidualdeviance3[stepwiseselectionsleep2$model$maxlife10==1], col = "blue")
plot(standardresidualpearson3[stepwiseselectionsleep2$model$maxlife10==0], col = "red", ylim = c(-3.5,3.5), ylab = "Standard Pearson Residuals", xlab = "ID")
points(standardresidualpearson3[stepwiseselectionsleep2$model$maxlife10==1], col = "blue")
plot(stepwiseselectionsleep2, which = 4, id.n = 5)
influenceddiagnostics4 = which(cooks.distance(stepwiseselectionsleep2)>0.25)
influenceddiagnostics4
glmrefitsleep2 = glm(maxlife10 ~ brainweight + totalsleep + as.factor(predationindex) + as.factor(sleepexposureindex),
data = sleepdata[-influenceddiagnostics4], family = "binomial")
# 4c)
summary(glmrefitsleep2)
round(exp(glmrefitsleep2$coefficients),3)
library(tidyverse)
library(ResourceSelection)
library(DescTools)
setwd("/Users/c2cypher/codebase/msda/msda-grad-school/sta-6443-902-data_analytics_algorithms/exam_2/HW4")
liverdata<- read.csv("liver-1.csv", header = TRUE)
str(liverdata)
liverFemale = liverdata[which(liverdata$Gender == "Female"),]
glmnullFemale = glm(LiverPatient ~ 1, data = liverFemale, family = "binomial")
glmfullFemale = glm(LiverPatient ~ Age + TB + DB +Alkphos + Alamine + Aspartate + TP + ALB, data = liverFemale, family = "binomial")
stepwiseselectionfemale = step(glmnullFemale, scope = list(upper = glmfullFemale),
direction="both",test="Chisq", trace = F)
summary(stepwiseselectionfemale)
hoslem.test(stepwiseselectionfemale$y, fitted(stepwiseselectionfemale), g=10)
residualdeviance = residuals(stepwiseselectionfemale, type = "deviance")
residualpearson = residuals(stepwiseselectionfemale, type = "pearson")
standardresidualdeviance = residuals(stepwiseselectionfemale, type = "deviance")/sqrt(1 - hatvalues(stepwiseselectionfemale))
standardresidualpearson = residuals(stepwiseselectionfemale, type = "pearson")/sqrt(1 - hatvalues(stepwiseselectionfemale))
par(mfrow=c(1,2))
plot(standardresidualdeviance[stepwiseselectionfemale$model$LiverPatient==0], col = "red",
ylim = c(-3.5,3.5), ylab = "Standard Deviance Residuals", xlab = "ID")
points(standardresidualdeviance[stepwiseselectionfemale$model$LiverPatient==1], col = "blue")
plot(standardresidualpearson[stepwiseselectionfemale$model$LiverPatient==0], col = "red",
ylim = c(-3.5,3.5), ylab = "Standard Pearson Residuals", xlab = "ID")
points(standardresidualpearson[stepwiseselectionfemale$model$LiverPatient==1], col = "blue")
plot(stepwiseselectionfemale, which = 4, id.n = 5)
influenceddiagnostics = which(cooks.distance(stepwiseselectionfemale)>0.25)
influenceddiagnostics
summary(stepwiseselectionfemale)
round(exp(stepwiseselectionfemale$coefficients),3)
liverMale = liverdata[which(liverdata$Gender == "Male"),]
glmnullMale= glm(LiverPatient ~ 1, data = liverMale, family = "binomial")
glmfullMale = glm(LiverPatient ~ Age + TB + DB +Alkphos + Alamine + Aspartate + TP + ALB, data = liverMale, family = "binomial")
stepwiseselectionmale = step(glmnullMale, scope = list(upper = glmfullMale),
direction="both",test="Chisq", trace = F)
summary(stepwiseselectionmale)
hoslem.test(stepwiseselectionmale$y, fitted(stepwiseselectionmale), g=10)
residualdeviance = residuals(stepwiseselectionmale, type = "deviance")
residualpearson = residuals(stepwiseselectionmale, type = "pearson")
standardresidualdeviance = residuals(stepwiseselectionmale, type = "deviance")/sqrt(1 - hatvalues(stepwiseselectionmale))
standardresidualpearson = residuals(stepwiseselectionmale, type = "pearson")/sqrt(1 - hatvalues(stepwiseselectionmale))
par(mfrow=c(1,2))
plot(standardresidualdeviance[stepwiseselectionmale$model$LiverPatient==0], col = "red",
ylim = c(-3.5,3.5), ylab = "Standard Deviance Residuals", xlab = "ID")
points(standardresidualdeviance[stepwiseselectionmale$model$LiverPatient==1], col = "blue")
plot(standardresidualpearson[stepwiseselectionmale$model$LiverPatient==0], col = "red",
ylim = c(-3.5,3.5), ylab = "Standard Pearson Residuals", xlab = "ID")
points(standardresidualpearson[stepwiseselectionmale$model$LiverPatient==1], col = "blue")
plot(stepwiseselectionmale, which = 4, id.n = 5)
influenceddiagnostics2 = which(cooks.distance(stepwiseselectionmale)>0.25)
influenceddiagnostics2
glmrefitliver2 =  glm(LiverPatient ~ DB + Alamine + Age + Alkphos, data = liverMale[-influenceddiagnostics2, ], family = "binomial")
summary(glmrefitliver2)
round(exp(glmrefitliver2$coefficients),3)
sleepdata = read.csv("sleep-1.csv", header = TRUE)
str(sleepdata)
glmnullsleep = glm(maxlife10 ~ 1, data = sleepdata, family = "binomial")
glmfullsleep = glm(maxlife10 ~ bodyweight + brainweight + totalsleep + gestationtime + as.factor(predationindex) + as.factor(sleepexposureindex),
data = sleepdata, family = "binomial")
stepwiseselectionsleep = step(glmnullsleep, scope = list(upper=glmfullsleep),
direction ="both",test ="Chisq", trace = F)
summary(stepwiseselectionsleep)
hoslem.test(stepwiseselectionsleep$y, fitted(stepwiseselectionsleep), g=10)
residudaldeviance2<-residuals(stepwiseselectionsleep, type = "deviance")
residualpearson2<-residuals(stepwiseselectionsleep, type = "pearson")
standardresidualdeviance2<-residuals(stepwiseselectionsleep, type = "deviance")/sqrt(1 - hatvalues(stepwiseselectionsleep))
standardresidualpearson2 <-residuals(stepwiseselectionsleep, type = "pearson")/sqrt(1 - hatvalues(stepwiseselectionsleep))
par(mfrow=c(1,2))
plot(standardresidualdeviance2[stepwiseselectionsleep$model$maxlife10==0], col = "red", ylim = c(-3.5,3.5), ylab = "Standard Deviance Residuals", xlab = "ID")
points(standardresidualdeviance2[stepwiseselectionsleep$model$maxlife10==1], col = "blue")
plot(standardresidualpearson2[stepwiseselectionsleep$model$maxlife10==0], col = "red", ylim = c(-3.5,3.5), ylab = "Standard Pearson Residuals", xlab = "ID")
points(standardresidualpearson2[stepwiseselectionsleep$model$maxlife10==1], col = "blue")
plot(stepwiseselectionsleep, which = 4, id.n = 5)
influenceddiagnostics3 = which(cooks.distance(stepwiseselectionsleep)>0.25)
influenceddiagnostics3
glmrefitsleep = glm(maxlife10 ~ brainweight + totalsleep + as.factor(predationindex) + as.factor(sleepexposureindex),
data = sleepdata[-influenceddiagnostics3], family = "binomial")
summary(glmrefitsleep)
round(exp(glmrefitsleep$coefficients),3)
glmnullsleep2 = glm(maxlife10 ~ 1, data = sleepdata, family = "binomial")
glmfullsleep2 = glm(maxlife10 ~ bodyweight + brainweight + totalsleep + gestationtime + predationindex + sleepexposureindex, data = sleepdata, family = "binomial")
stepwiseselectionsleep2 = step(glmnullsleep2, scope = list(upper=glmfullsleep2),
direction ="both",test ="Chisq", trace = F)
summary(stepwiseselectionsleep2)
hoslem.test(stepwiseselectionsleep2$y, fitted(stepwiseselectionsleep2), g=10)
residudaldeviance3<-residuals(stepwiseselectionsleep2, type = "deviance")
residualpearson3<-residuals(stepwiseselectionsleep2, type = "pearson")
standardresidualdeviance3<-residuals(stepwiseselectionsleep2, type = "deviance")/sqrt(1 - hatvalues(stepwiseselectionsleep2))
standardresidualpearson3 <-residuals(stepwiseselectionsleep2, type = "pearson")/sqrt(1 - hatvalues(stepwiseselectionsleep2))
par(mfrow=c(1,2))
plot(standardresidualdeviance3[stepwiseselectionsleep2$model$maxlife10==0], col = "red", ylim = c(-3.5,3.5), ylab = "Standard Deviance Residuals", xlab = "ID")
points(standardresidualdeviance3[stepwiseselectionsleep2$model$maxlife10==1], col = "blue")
plot(standardresidualpearson3[stepwiseselectionsleep2$model$maxlife10==0], col = "red", ylim = c(-3.5,3.5), ylab = "Standard Pearson Residuals", xlab = "ID")
points(standardresidualpearson3[stepwiseselectionsleep2$model$maxlife10==1], col = "blue")
plot(stepwiseselectionsleep2, which = 4, id.n = 5)
influenceddiagnostics4 = which(cooks.distance(stepwiseselectionsleep2)>0.25)
influenceddiagnostics4
glmrefitsleep2 = glm(maxlife10 ~ brainweight + totalsleep + as.factor(predationindex) + as.factor(sleepexposureindex),
data = sleepdata[-influenceddiagnostics4], family = "binomial")
summary(glmrefitsleep2)
round(exp(glmrefitsleep2$coefficients),3)
View(glmnullsleep)
setwd("/Users/c2cypher/codebase/msda/msda-grad-school/sta-6443-902-data_analytics_algorithms/exam_2/final_exam")
df = read.csv('birthweight_final.csv)
df = read.csv('birthweight_final.csv')
df = read.csv('birthweight_final.csv')
df = read.csv('birthweight_final.csv')
df = read.csv('birthweight_final.csv')
df$Black = as.factor(df$Black)
df$Married = as.factor(df$Married)
df$Boy = as.factor(df$Boy)
df$MomSmoke = as.factor(df$MomSmoke)
df$Ed = as.factor(df$Ed)
str(df)
regression.lm = lm(Weight ~ Black + Married + Boy + MomSmoke + Ed + MomAge + MomWtGain + Visit, data = df)
summary(regression.lm)
q1.lm = lm(Weight ~ Black + Married + Boy + MomSmoke + Ed + MomAge + MomWtGain + Visit, data = df)
summary(q1.lm)
stepwise.q1 = ols_step_both_p(ql.lm, pent = 0.01, prem = 0.01, details = F)
library(tidyverse)
library(olsrr)
library(car)
library(ResourceSelection)
library(DescTools)
setwd("/Users/c2cypher/codebase/msda/msda-grad-school/sta-6443-902-data_analytics_algorithms/exam_2/final_exam")
df = read.csv('birthweight_final.csv')
df$Black = as.factor(df$Black)
df$Married = as.factor(df$Married)
df$Boy = as.factor(df$Boy)
df$MomSmoke = as.factor(df$MomSmoke)
df$Ed = as.factor(df$Ed)
str(df)
q1.lm = lm(Weight ~ Black + Married + Boy + MomSmoke + Ed + MomAge + MomWtGain + Visit, data = df)
summary(q1.lm)
stepwise.q1 = ols_step_both_p(ql.lm, pent = 0.01, prem = 0.01, details = F)
stepwise.q1 = ols_step_both_p(q1.lm, pent = 0.01, prem = 0.01, details = F)
stepwise.q1 = ols_step_both_p(q1.lm, pent = 0.01, prem = 0.01, details = F)
stepwise.q1
library(MASS); library(car); library(olsrr)
setwd("/Users/c2cypher/codebase/msda/msda-grad-school/sta-6443-902-data_analytics_algorithms/datasets")  # need to change this path
?UScrime  # data in packages "MASS"
str(UScrime)
dev.new(width = 1000, height = 1000, unit = "px")
pairs(UScrime, pch = 19) # 16 by 16 scatter plot matrix
pairs(UScrime[,c(1:9,16)], pch = 19) # output in lecture note
######################################################################
# simulation study
#####################################################################
drinking=read.csv("drinking.csv", header=TRUE)
# simulation data generation - predictors with perfect or high correlation
set.seed(5678)
alcohol2= 3* drinking$alcohol   # alcohol & alcohol2 : perfect linear relationship
alcohol3= 3*drinking$alcohol+rnorm(15,0,0.5) # alcohol & alcohol3 : almost linear but not perfectly linear
# new dataframe with simulated predictors - alcohol2 & alcohol3
drinking.new=data.frame(cbind(drinking, alcohol2, alcohol3))
# check correlation through pairwise scatter plot and correation
pairs(drinking.new[ ,c(2:5)])
cor(drinking.new$alcohol, drinking.new$alcohol2)
cor(drinking.new$alcohol, drinking.new$alcohol3)
plot(drinking.new$alcohol, drinking.new$alcohol2)
plot(drinking.new$alcohol, drinking.new$alcohol3)
# run linear regressions with multicollinearity issue
# perfect correlation
lm.multicol1 = lm(cirrhosis~alcohol+alcohol2, data=drinking.new)
# high correlation but not perfect
lm.multicol2 = lm(cirrhosis~alcohol+alcohol3, data=drinking.new)
summary(lm.multicol1)
summary(lm.multicol2)
# run simple linear regression
lm.multicol1 = lm(cirrhosis~alcohol, data=drinking.new)
summary(lm.multicol1)
lm.multicol2 = lm(cirrhosis~alcohol2, data=drinking.new)
summary(lm.multicol2)
lm.multicol3 = lm(cirrhosis~alcohol3, data=drinking.new)
summary(lm.multicol3)
lm.crime <- lm(y~., data=UScrime)   # run the model with all variables in data set
summary(lm.crime)
summary(lm.crime)$r.squared  # R-square: percentage of variation of y explained by the model
summary(lm.crime)$adj.r.squared  # adjusted R-square: with penalty for large (large p) model
# VIF to check multicollinearity
vif(lm.crime)   # in package "car"
lm.crime2=lm(y~.-Po2, data=UScrime)   # all predictors except Po2
vif(lm.crime2)
lm.crime3=lm(y~.-Po2-GDP, data=UScrime)   # all predictors except Po2 and GDP
vif(lm.crime3)
par(mfrow=c(2,2))
plot(lm.crime3, which=1:4)  # diagnostics plot
######################################################################
# model selection
#######################################################################
# 1. automatic selection (forward, backward, stepwise selection)
########################################################################
# stepwise selection
model.stepwise<-ols_step_both_p(lm.crime3, pent = 0.10, prem = 0.10, details = FALSE)
model.stepwise
plot(model.stepwise)
lm.step=lm(y~Po1+Ineq+Ed+M+Prob+U2, data=UScrime)
summary(lm.step)
# forward selection
model.forward<-ols_step_forward_p(lm.crime3, penter = 0.10, details = F) # penter: threshold p-value for enter
model.forward    # final model summary
plot(model.forward)
# backward selection
model.backward<-ols_step_backward_p(lm.crime3, prem = 0.10, details = F) # prem: threshold p-value for removal
model.backward
###############################################
# 2. best subset selection (AIC, SBC, adjusted R-squre, C(p) etc.)
model.best.subset<-ols_step_best_subset(lm.crime3) # takes some of time 5-10 min. Be patient :)
model.best.subset
library(DescTools);
library(ResourceSelection)
setwd("/Users/c2cypher/codebase/msda/msda-grad-school/sta-6443-902-data_analytics_algorithms/datasets")  # need to change this path
amputation=read.csv("amputation.csv",header = TRUE)
str(amputation)
glm.amputation <- glm(AMPUTATION ~ factor(ILLNESS_SEVERITY)+factor(diabetes)+factor(Ulcers), data = amputation, family = "binomial")
summary(glm.amputation)
############################################
# Odds Ratio
round(exp(glm.amputation$coefficients),3)
amputation$hypertension = as.factor(amputation$hypertension)
amputation$Ulcers = as.factor(amputation$Ulcers)
model.null = glm(AMPUTATION ~ 1, data=amputation, family = binomial) # null model : no predictor
model.full = glm(AMPUTATION ~ ., data=amputation, family = binomial) # full model: all predictors
View(amputation)
setwd("/Users/c2cypher/codebase/msda/msda-grad-school/sta-6443-902-data_analytics_algorithms/datasets/")
drinking=read.csv("drinking.csv", header=TRUE)
str(drinking)
##############################################################
# scatter plot and correltion between alcohol and cirrhosis
##############################################################
# scatter plot
with(drinking, plot(alcohol, cirrhosis))
plot(drinking$alcohol, drinking$cirrhosis, xlab="alcohol", ylab="cirrhosis")
# correlation
cor(drinking$alcohol, drinking$cirrhosis, method="pearson")
cor(drinking$alcohol, drinking$cirrhosis, method="spearman")
################################
# fit linear regression
###############################
lm.drinking <- lm(cirrhosis~alcohol, data=drinking)
summary(lm.drinking)
###################################
# scatter plot - alcohol vs. cirrhosis
###################################
with(drinking, plot(alcohol, cirrhosis))
abline(lm.drinking, col="red")
################################
# diagnostics plot
###############################
par(mfrow=c(2,2))
plot(lm.drinking, which=c(1:4))    # default diagnostics plots
# manual generation of diagnostics plot
std.res=rstandard(lm.drinking)    # fitted vs. standardized residual plot
Y.hat=fitted(lm.drinking)
plot(Y.hat, std.res); abline(h=0,col="red")
#############################
# other saved results
############################
(Y.hat = fitted(lm.drinking))   #Predicted value
(residuals = residuals(lm.drinking))   # residual = Y - fitted values (Y-hat)
names(lm.drinking) # other saved results
lm.drinking$coefficients
lm.drinking$fitted.values
names(summary(lm.drinking))
summary(lm.drinking)$r.squared
#############################
# influential points
#############################
cook.d = cooks.distance(lm.drinking)
round(cook.d, 2)
plot(cook.d,col="pink", pch=19, cex=1)
text(cooks.distance(lm.drinking),labels = rownames(drinking))
###############################################
# find observation id with large cook's d
inf.id = which(cooks.distance(lm.drinking)>1)
drinking[inf.id, ]
lm.drinking2=lm(cirrhosis ~ alcohol, data=drinking[-inf.id, ])
with(drinking, plot(alcohol, cirrhosis))
abline(lm.drinking, col="red")
abline(lm.drinking2,col="blue") # without france
legend("bottomright",col=c("red","blue"),legend=c("w/ France", "w/out France"), cex=0.8, title.adj=0.15, lty=1)
# compare two regression results
summary(lm.drinking)   # w/ France
summary(lm.drinking2)  # w/out France
library(MASS); library(car); library(olsrr)
setwd("/Users/c2cypher/codebase/msda/msda-grad-school/sta-6443-902-data_analytics_algorithms/datasets")  # need to change this path
?UScrime  # data in packages "MASS"
str(UScrime)
dev.new(width = 1000, height = 1000, unit = "px")
pairs(UScrime, pch = 19) # 16 by 16 scatter plot matrix
pairs(UScrime[,c(1:9,16)], pch = 19) # output in lecture note
######################################################################
# simulation study
#####################################################################
drinking=read.csv("drinking.csv", header=TRUE)
# simulation data generation - predictors with perfect or high correlation
set.seed(5678)
alcohol2= 3* drinking$alcohol   # alcohol & alcohol2 : perfect linear relationship
alcohol3= 3*drinking$alcohol+rnorm(15,0,0.5) # alcohol & alcohol3 : almost linear but not perfectly linear
# new dataframe with simulated predictors - alcohol2 & alcohol3
drinking.new=data.frame(cbind(drinking, alcohol2, alcohol3))
# check correlation through pairwise scatter plot and correation
pairs(drinking.new[ ,c(2:5)])
cor(drinking.new$alcohol, drinking.new$alcohol2)
cor(drinking.new$alcohol, drinking.new$alcohol3)
plot(drinking.new$alcohol, drinking.new$alcohol2)
plot(drinking.new$alcohol, drinking.new$alcohol3)
# run linear regressions with multicollinearity issue
# perfect correlation
lm.multicol1 = lm(cirrhosis~alcohol+alcohol2, data=drinking.new)
# high correlation but not perfect
lm.multicol2 = lm(cirrhosis~alcohol+alcohol3, data=drinking.new)
summary(lm.multicol1)
summary(lm.multicol2)
# run simple linear regression
lm.multicol1 = lm(cirrhosis~alcohol, data=drinking.new)
summary(lm.multicol1)
lm.multicol2 = lm(cirrhosis~alcohol2, data=drinking.new)
summary(lm.multicol2)
lm.multicol3 = lm(cirrhosis~alcohol3, data=drinking.new)
summary(lm.multicol3)
lm.crime <- lm(y~., data=UScrime)   # run the model with all variables in data set
summary(lm.crime)
summary(lm.crime)$r.squared  # R-square: percentage of variation of y explained by the model
summary(lm.crime)$adj.r.squared  # adjusted R-square: with penalty for large (large p) model
# VIF to check multicollinearity
vif(lm.crime)   # in package "car"
setwd("/Users/c2cypher/codebase/msda/msda-grad-school/sta-6443-902-data_analytics_algorithms/datasets/")
drinking=read.csv("drinking.csv", header=TRUE)
str(drinking)
##############################################################
# scatter plot and correltion between alcohol and cirrhosis
##############################################################
# scatter plot
with(drinking, plot(alcohol, cirrhosis))
plot(drinking$alcohol, drinking$cirrhosis, xlab="alcohol", ylab="cirrhosis")
# correlation
cor(drinking$alcohol, drinking$cirrhosis, method="pearson")
cor(drinking$alcohol, drinking$cirrhosis, method="spearman")
##############################################################
# scatter plot and correltion between alcohol and cirrhosis
##############################################################
# scatter plot
with(drinking, plot(alcohol, cirrhosis))
plot(drinking$alcohol, drinking$cirrhosis, xlab="alcohol", ylab="cirrhosis")
# correlation
cor(drinking$alcohol, drinking$cirrhosis, method="pearson")
cor(drinking$alcohol, drinking$cirrhosis, method="spearman")
################################
# fit linear regression
###############################
lm.drinking <- lm(cirrhosis~alcohol, data=drinking)
summary(lm.drinking)
###################################
# scatter plot - alcohol vs. cirrhosis
###################################
with(drinking, plot(alcohol, cirrhosis))
abline(lm.drinking, col="red")
###################################
# scatter plot - alcohol vs. cirrhosis
###################################
with(drinking, plot(alcohol, cirrhosis))
abline(lm.drinking, col="red")
setwd
setwd
setwd
setwd
setwd("/Users/c2cypher/codebase/msda/msda-grad-school/sta-6443-902-data_analytics_algorithms/datasets/")
drinking=read.csv("drinking.csv", header=TRUE)
str(drinking)
##############################################################
# scatter plot and correltion between alcohol and cirrhosis
##############################################################
# scatter plot
with(drinking, plot(alcohol, cirrhosis))
plot(drinking$alcohol, drinking$cirrhosis, xlab="alcohol", ylab="cirrhosis")
# correlation
cor(drinking$alcohol, drinking$cirrhosis, method="pearson")
cor(drinking$alcohol, drinking$cirrhosis, method="spearman")
################################
# fit linear regression
###############################
lm.drinking <- lm(cirrhosis~alcohol, data=drinking)
summary(lm.drinking)
###################################
# scatter plot - alcohol vs. cirrhosis
###################################
with(drinking, plot(alcohol, cirrhosis))
abline(lm.drinking, col="red")
setwd("/Users/c2cypher/codebase/msda/msda-grad-school/sta-6443-902-data_analytics_algorithms/datasets/")
drinking=read.csv("drinking.csv", header=TRUE)
str(drinking)
##############################################################
# scatter plot and correltion between alcohol and cirrhosis
##############################################################
# scatter plot
with(drinking, plot(alcohol, cirrhosis))
plot(drinking$alcohol, drinking$cirrhosis, xlab="alcohol", ylab="cirrhosis")
# correlation
cor(drinking$alcohol, drinking$cirrhosis, method="pearson")
cor(drinking$alcohol, drinking$cirrhosis, method="spearman")
################################
# fit linear regression
###############################
lm.drinking <- lm(cirrhosis~alcohol, data=drinking)
summary(lm.drinking)
###################################
# scatter plot - alcohol vs. cirrhosis
###################################
with(drinking, plot(alcohol, cirrhosis))
abline(lm.drinking, col="red")
# data generation
set.seed(12345678)
X = rnorm(100,3,1)   # random generation of independent variable
Y = 1.5+3*X           # E(Y) = 1.5 + 3X
##################
# scenario 1
##################
e1 = rnorm(100,0,0.5) # normally distributed error
Y1 = Y + e1          # observed Y1 with noise e1
##################
# scenario 2
##################
e2 = rlnorm(100,0,1)  # error from right skewed and heavy tailed distribution (log normal)
Y2 = Y + e2         # observed Y2 with noise e2
##################
# scenario 3
##################
e3 = X^2*e1      # heteroscediaticity (variance of error is proportional to X)
Y3 = Y + e3      # observed Y3 from noise e3
##################
# scenario 4
##################
Y4 = 1.5+X^2+e1  # non-linear relationship
# simulated data from each scenario
#dev.new(width = 100, height = 100, unit = "px")
par(mfrow=c(2,2))
plot(X,Y1, main="Scenario 1"); lines(X, Y, col="red")
plot(X,Y2, main="Scenario 2"); lines(X, Y, col="red")
plot(X,Y3, main="Scenario 3"); lines(X, Y, col="red")
plot(X,Y4, main="Scenario 4"); lines(X, Y, col="red")
# fit the linear regression and check diagnostics plot
res1=lm(Y1~X);
par(mfrow=c(2,2))
plot(res1, which=1:4)
res2=lm(Y2~X);
par(mfrow=c(2,2))
plot(res2, which=1:4)
res3=lm(Y3~X);
par(mfrow=c(2,2))
plot(res3, which=1:4)
res4=lm(Y4~X);
par(mfrow=c(2,2))
plot(res4, which=1:4)
