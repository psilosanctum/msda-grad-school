cum.percent = TRUE)
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor$i,
sort.group = "decreasing",
cum.percent = TRUE)
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
sort.group = "decreasing",
cum.percent = TRUE)
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
col = c(i),
sort.group = "decreasing",
cum.percent = TRUE)
tab1()
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(x0 = predictor,
col = c(i),
sort.group = "decreasing",
cum.percent = TRUE)
tab1()
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(x0 = predictor,
col = i,
sort.group = "decreasing",
cum.percent = TRUE)
tab1()
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
col = i,
sort.group = "decreasing",
cum.percent = TRUE)
tab1()
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
main = i,
sort.group = "decreasing",
cum.percent = TRUE)
tab1()
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
main = predictor,
sort.group = "decreasing",
cum.percent = TRUE)
tab1()
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(]
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(
main = predictor,
sort.group = "decreasing",
cum.percent = TRUE)
tab1()
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
main = predictor,
sort.group = "decreasing",
cum.percent = TRUE)
tab1()
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
#main = predictor,
sort.group = "decreasing",
cum.percent = TRUE)
tab1()
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
#main = predictor,
sort.group = "decreasing",
cum.percent = TRUE)
tab1()
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
#main = predictor,
sort.group = "decreasing",
cum.percent = TRUE)
tab1()
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
sort.group = "decreasing",
cum.percent = TRUE)
tab1()
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
sort.group = "decreasing",
cum.percent = TRUE)
tab1()
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
sort.group = "decreasing",
cum.percent = TRUE)
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
main = predictor,
sort.group = "decreasing",
cum.percent = TRUE)
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
main = i,
sort.group = "decreasing",
cum.percent = TRUE)
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
col = predictor,
sort.group = "decreasing",
cum.percent = TRUE)
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
col = c(predictor),
sort.group = "decreasing",
cum.percent = TRUE)
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
main = colnames(predictor),
sort.group = "decreasing",
cum.percent = TRUE)
print(predictor_info)
}
# Investigate frequency distributions for categorical predictors
for (i in 1:35) {
predictor <- Soybean[, i]
#  freq_table <- table(predictor)
#  print(freq_table)
predictor_info <- tab1(predictor,
main = colnames(Soybean[i]),
sort.group = "decreasing",
cum.percent = TRUE)
print(predictor_info)
}
# Identify predictors with high missing percentages
missing_counts <- colSums(is.na(Soybean))
missing_percentage <- missing_counts / nrow(Soybean) * 100
sorted_missing <- sort(missing_percentage, decreasing = TRUE)
predictors_with_missing <- names(sorted_missing)[sorted_missing > 0]
missing_counts
# Identify predictors with high missing percentages
missing_counts <- colSums(is.na(Soybean))
missing_percentage <- missing_counts / nrow(Soybean) * 100
sorted_missing <- sort(missing_percentage, decreasing = TRUE)
predictors_with_missing <- names(sorted_missing)[sorted_missing > 0]
missing_counts
missing_percentage
# Identify predictors with high missing percentages
missing_counts <- colSums(is.na(Soybean))
missing_percentage <- missing_counts / nrow(Soybean) * 100
sorted_missing <- sort(missing_percentage, decreasing = TRUE)
predictors_with_missing <- names(sorted_missing)[sorted_missing > 0]
missing_counts
missing_percentage
sorted_missing
# Identify predictors with high missing percentages
missing_counts <- colSums(is.na(Soybean))
missing_percentage <- missing_counts / nrow(Soybean) * 100
sorted_missing <- sort(missing_percentage, decreasing = TRUE)
predictors_with_missing <- names(sorted_missing)[sorted_missing > 0]
missing_counts
missing_percentage
sorted_missing
predictors_with_missing
# Option 1: Eliminate predictors with high missing percentages
Soybean_clean <- Soybean[, -which(names(Soybean) %in% predictors_with_missing)]
Soybean_clean
# Identify predictors with high missing percentages
missing_counts <- colSums(is.na(Soybean))
missing_percentage <- missing_counts / nrow(Soybean) * 100
sorted_missing <- sort(missing_percentage, decreasing = TRUE)
predictors_with_missing <- names(sorted_missing)[sorted_missing > 0]
missing_counts
missing_percentage
sorted_missing
predictors_with_missing
# Option 1: Eliminate predictors with high missing percentages
Soybean_clean <- Soybean[, -which(names(Soybean) %in% predictors_with_missing > 15 )]
Soybean_clean
# Option 1: Eliminate predictors with high missing percentages
Soybean_clean <- Soybean[, -which(names(Soybean) %in% predictors_with_missing where names(Soybean) > 15 )]
# Option 1: Eliminate predictors with high missing percentages
Soybean_clean <- Soybean[, -which(names(Soybean) %in% predictors_with_missing > 15 )]
Soybean_clean
# Option 1: Eliminate predictors with high missing percentages
Soybean_clean <- Soybean[, -which(names(Soybean) %in% missing_percentage > 15 )]
Soybean_clean
# Option 1: Eliminate predictors with high missing percentages
Soybean_clean <- Soybean[, -which(names(Soybean) %in% missing_percentage > where names(Soybean) > 15 )]
# Option 1: Eliminate predictors with high missing percentages
predictors_with_missing <- names(sorted_missing)[sorted_missing > 15]
predictors_with_missing
# Option 1: Eliminate predictors with high missing percentages
predictors_with_missing <- names(sorted_missing)[sorted_missing < 15]
predictors_with_missing
install.packages('mice')
library(MASS)
library(ggplot2)
library(dplyr)
library(tidyr)
library(corrplot)
library(epiDisplay)
library(mice)
data(Boston)
imputed_data <- mice(Soybean)
imputed_data
library(MASS)
library(ggplot2)
library(dplyr)
library(tidyr)
library(corrplot)
library(epiDisplay)
library(mice)
library(caret)
data(Boston)
library(MASS)
library(ggplot2)
library(dplyr)
library(tidyr)
library(corrplot)
library(epiDisplay)
library(mice)
library(caret)
data(Boston)
data(oil)
str(oil)
str(oilType)
table(oilType)
samp1 <- sample(oilType, 60, replace = FALSE, prob = NULL)
table(samp1)
samp2 <- sample(oilType, 60, replace = FALSE, prob = NULL)
table(samp2)
samp4 <- sample(oilType, 60, replace = FALSE, prob = NULL)
table(samp4)
samp3 <- sample(oilType, 60, replace = FALSE, prob = NULL)
table(samp3)
samp2 <- sample(oilType, 60, replace = FALSE, prob = NULL)
table(samp2)
set.seed(318)
strat_samp <- createDataPartition(oilType, p = .70, times = 20)
strat_samp <- lapply(strat_samp, function(x, y) table(y[x]), y = oilType)
head(strat_samp, 3)
samp4 <- sample(oilType, 60, replace = FALSE, prob = NULL)
table(samp4)
missing_total <- colSums(is.na(Soybean))
missing_total
missing_pct <- missing_total / nrow(Soybean) * 100
missing_pct
sorted_missing <- sort(missing_pct, decreasing = TRUE)
sorted_missing
predictors_with_missing <- names(sorted_missing)[sorted_missing > 0]
predictors_with_missing
missing_total <- colSums(is.na(Soybean))
missing_total
missing_pct <- missing_total / nrow(Soybean) * 100
missing_pct
sorted_missing <- sort(missing_pct, decreasing = TRUE)
sorted_missing
missing_preds <- names(sorted_missing)[sorted_missing > 0]
missing_preds
Soybean %>%
plot_na_intersect(only_na = TRUE, typographic = TRUE, n_intersacts = 7)
install.packages('dlookr')
library(MASS)
library(ggplot2)
library(dplyr)
library(tidyr)
library(corrplot)
library(epiDisplay)
library(mice)
library(caret)
library(dlookr)
Soybean %>%
plot_na_intersect(only_na = TRUE, typographic = TRUE, n_intersacts = 7)
cor(Boston$crim, Boston[-1])
which.max(Boston$crim)
which.max(Boston$tax)
which.max(Boston$ptratio)
View(Boston)
which.range(Boston$crim)
range(Boston$crim)
range(Boston$tax)
range(Boston$ptratio)
# Suburbs with particularly high crime rates
high_crime_suburbs <- subset(Boston, crim > 10)
cat("Suburbs with high crime rates:\n")
print(high_crime_suburbs)
# Suburbs with particularly high tax rates
high_tax_suburbs <- subset(Boston, tax > 400)
cat("Suburbs with high tax rates:\n")
print(high_tax_suburbs)
# Suburbs with particularly high pupil-teacher ratios
high_ptratio_suburbs <- subset(Boston, ptratio > 20)
cat("Suburbs with high pupil-teacher ratios:\n")
print(high_ptratio_suburbs)
range(Boston$crim)
range(Boston$tax)
range(Boston$ptratio)
high_crime_suburbs <- subset(Boston, crim > 40)
cat("Suburbs with high crime rates:\n")
print(high_crime_suburbs)
high_tax_suburbs <- subset(Boston, tax > 400)
cat("Suburbs with high tax rates:\n")
print(high_tax_suburbs)
high_ptratio_suburbs <- subset(Boston, ptratio > 18)
cat("Suburbs with high pupil-teacher ratios:\n")
print(high_ptratio_suburbs)
high_crime_suburbs <- subset(Boston, crim > 40)
cat("Suburbs with high crime rates:\n")
print(high_crime_suburbs)
high_tax_suburbs <- subset(Boston, tax > 400)
cat("Suburbs with high tax rates:\n")
print(high_tax_suburbs)
high_ptratio_suburbs <- subset(Boston, ptratio > 20)
cat("Suburbs with high pupil-teacher ratios:\n")
print(high_ptratio_suburbs)
cat("Range crime rates:\n")
range(Boston$crim)
cat("Range tax rates:\n")
range(Boston$tax)
high_crime_suburbs <- subset(Boston, crim > 40)
cat("Suburbs with high crime rates:\n")
print(high_crime_suburbs)
high_tax_suburbs <- subset(Boston, tax > 400)
cat("Suburbs with high tax rates:\n")
print(high_tax_suburbs)
high_crime_suburbs <- subset(Boston, crim > 40)
cat("Suburbs with high crime rates:\n")
high_crime_suburbs
high_tax_suburbs <- subset(Boston, tax > 400)
cat("Suburbs with high tax rates:\n")
high_tax_suburbs
high_crime_suburbs <- subset(Boston, crim > 40)
cat("Suburbs with high crime rates:\n")
high_crime_suburbs
high_tax_suburbs <- subset(Boston, tax > 600)
cat("Suburbs with high tax rates:\n")
high_tax_suburbs
charles_river_suburbs <- sum(Boston$chas == 1)
cat("Number of suburbs bound to Charles River:", charles_river_suburbs, "\n")
charles_river_suburbs
median_ptratio <- median(Boston$ptratio)
cat("Median pupil-teacher ratio:", median_ptratio, "\n")
median_ptratio
Soybean %>%
plot_na_intersect(only_na = TRUE, typographic = TRUE, n_intersacts = 7)
#binom.test()
Boston$chas = as.numeric(Boston$chas)
Boston$rad = as.numeric(Boston$rad)
converted_dtypes = str(subset(Boston, select = c("chas", "rad")))
nrow(Boston)
nrow(Boston)
ncol(Boston)
corrplot(round(cor(Boston),2),
diag = TRUE,
sig.level = 0.5,
method = "pie",
insig = "blank",
tl.col = "black",
tl.srt = 45)
corrplot(round(cor(Boston),2),
diag = TRUE,
sig.level = 0.5,
method = "pie",
insig = "blank",
tl.col = "black",
tl.srt = 45,
type = "upper")
binom.test(16, 20)
binom.test(16, 20)
binom.test(20, 76)
binom.test(20, 76)
binom.test(25, 76)
binom.test(20, 76)
binom.test(25, 76)
binom.test(45, 76)
binom.test(20, 76)
binom.test(25, 76)
binom.test(45, 76)
binom.test(15, 76)
binom.test(20, 76, .8)
binom.test(45, 76)
binom.test(15, 76)
binom.test(20, 76, .8)
binom.test(20, 76, .7)
binom.test(45, 76)
binom.test(15, 76)
